package testprojekt.controllers

/*
 * Implement the controller here
 */

main {
	appVersion "1.0"
	modelVersion "1.0"
	workflowManager WorkflowBackendConnection
}

remoteConnection WorkflowBackendConnection {
	uri "http://localhost:8080/testprojekt.backend/service/"
}


WorkflowElement FirstWFE {
	defaultProcessChain anmeldenPC
	
	onInit {
		init 
	}
	
	/*
	 * In der Methode werden die Aktionen an die View-Elemente gebunden.
	 */
	action CustomAction init {
		bind action registerLoginViewBt on Login.bRegister.onClick
		bind action backBT on Register.bBack.onClick
		bind action registerRegisterViewBt on Register.bRegister.onClick
		bind action switchToDownload on DateiUpload.switchView.onClick
		bind action switchToUpload on DateiDownload.switchView.onClick
		bind action logoutBT on DateiDownload.logoutButton.onClick
		bind action logoutBT on DateiUpload.logoutButton.onClick
		bind validator StringRangeValidator ( minLength 8 ) on Register.Passwort
	}
	
	/*
	 * Funktion des Registrieren-Button in der Anmelden-View
	 */
	action CustomAction registerLoginViewBt {
		call SetProcessChain (registerPC)
	}
	
	/*
	 * Funktion des switchView-Button in der Download-View
	 */
	action CustomAction switchToUpload {
		call GotoView(DateiUpload)
	}
	
	/*
	 * Funktion des switchView-Button in der Download-View
	 */
	action CustomAction switchToDownload {
		call GotoView(DateiDownload)
	}
	
	/*
	 * Funktion des Registrieren-Buttons in der RegisterView
	 */
	action CustomAction registerRegisterViewBt {
		if (not Register.Passwort equals Register.PasswortWiederholen) {
			/* In diesem Fall sind die Felder Passwort und Passwort wiederholen nicht gleich. */
			call DisplayMessage ("Die Passwortfelder sind nicht gleich ausgefüllt.")
		} else {
			if (Register.Passwort equals "" or Register.UserName equals ""){
				/* In diesem Fall sind beide Felder gleich ausgefüllt (leer) oder der Nutzername ist leer, das ist auch nicht zulässig. */
				call DisplayMessage ("Das Nutzername und Passwort dürfen nicht leer sein.")
			} else {
				// Hier kommt hin, was bei einem gültign Wert passiert
			}
		}
	}
	
	/*
	 * Funktion des Zurück-Button in der RegisterView
	 */
	action CustomAction backBT {
		call SetProcessChain (anmeldenPC)
	}
	
	/*
	 * Funktion des Zurück-Button in der RegisterView
	 */
	action CustomAction logoutBT {
		call SetProcessChain (anmeldenPC)
	}
	
	action CustomAction firstAction {
		call FireEvent (BasicEvent)
	}
	
	/*
	 * Prozess-Kette zum Registrieren:
	 * 1. View Register öffnen
	 * 2. Werte kontrollieren (Passwort & Passwort-Wiederholung gleich?, alle Felder gültig ausgefüllt?)
	 * 3. Request starten
	 * 4. Nachricht über Erfolg oder Misserfolg
	 * 5. View wechseln
	 * 
	 */
	processChain  registerPC {
		step firstStep:
			view Register
	}
	
	/*
	 * Prozess-Kette zum Anmelden:
	 * 1. Login-View zeigen
	 * 2. Prüfung der Felder (Eingabe leer?)
	 * 3. Anfrage an REST-Service
	 * 4. View wechseln, wenn gültige Eingabe
	 */
	processChain  anmeldenPC {
		step firstStep:
			view Login
			proceed {
				on Login.bEinloggen.onClick
			}
		step secondStep:
			view DateiDownload
	}
}
